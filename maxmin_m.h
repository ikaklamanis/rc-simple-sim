//
// Generated file, do not edit! Created by opp_msgtool 6.0 from maxmin.msg.
//

#ifndef __MAXMIN_M_H
#define __MAXMIN_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// opp_msgtool version check
#define MSGC_VERSION 0x0600
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of opp_msgtool: 'make clean' should help.
#endif

class MaxMinMsg;
class MaxMinACK;
class ProbeMsg;
class ProbeACK;
class SelfTimer;
class InMsgTimer;
class OutMsgTimer;
class AckTimeOut;
class ProbeSelfTimer;
class ProbeAckTimeOut;
/**
 * Class generated from <tt>maxmin.msg:12</tt> by opp_msgtool.
 * <pre>
 * message MaxMinMsg
 * {
 *     int msgId;
 *     int source;
 *     int destination;
 * }
 * </pre>
 */
class MaxMinMsg : public ::omnetpp::cMessage
{
  protected:
    int msgId = 0;
    int source = 0;
    int destination = 0;

  private:
    void copy(const MaxMinMsg& other);

  protected:
    bool operator==(const MaxMinMsg&) = delete;

  public:
    MaxMinMsg(const char *name=nullptr, short kind=0);
    MaxMinMsg(const MaxMinMsg& other);
    virtual ~MaxMinMsg();
    MaxMinMsg& operator=(const MaxMinMsg& other);
    virtual MaxMinMsg *dup() const override {return new MaxMinMsg(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual int getMsgId() const;
    virtual void setMsgId(int msgId);

    virtual int getSource() const;
    virtual void setSource(int source);

    virtual int getDestination() const;
    virtual void setDestination(int destination);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const MaxMinMsg& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, MaxMinMsg& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>maxmin.msg:19</tt> by opp_msgtool.
 * <pre>
 * message MaxMinACK
 * {
 *     int msgId;
 *     int source;
 *     int destination;
 * }
 * </pre>
 */
class MaxMinACK : public ::omnetpp::cMessage
{
  protected:
    int msgId = 0;
    int source = 0;
    int destination = 0;

  private:
    void copy(const MaxMinACK& other);

  protected:
    bool operator==(const MaxMinACK&) = delete;

  public:
    MaxMinACK(const char *name=nullptr, short kind=0);
    MaxMinACK(const MaxMinACK& other);
    virtual ~MaxMinACK();
    MaxMinACK& operator=(const MaxMinACK& other);
    virtual MaxMinACK *dup() const override {return new MaxMinACK(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual int getMsgId() const;
    virtual void setMsgId(int msgId);

    virtual int getSource() const;
    virtual void setSource(int source);

    virtual int getDestination() const;
    virtual void setDestination(int destination);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const MaxMinACK& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, MaxMinACK& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>maxmin.msg:26</tt> by opp_msgtool.
 * <pre>
 * message ProbeMsg
 * {
 *     long msgId;
 *     int source;
 *     int destination;
 * }
 * </pre>
 */
class ProbeMsg : public ::omnetpp::cMessage
{
  protected:
    long msgId = 0;
    int source = 0;
    int destination = 0;

  private:
    void copy(const ProbeMsg& other);

  protected:
    bool operator==(const ProbeMsg&) = delete;

  public:
    ProbeMsg(const char *name=nullptr, short kind=0);
    ProbeMsg(const ProbeMsg& other);
    virtual ~ProbeMsg();
    ProbeMsg& operator=(const ProbeMsg& other);
    virtual ProbeMsg *dup() const override {return new ProbeMsg(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual long getMsgId() const;
    virtual void setMsgId(long msgId);

    virtual int getSource() const;
    virtual void setSource(int source);

    virtual int getDestination() const;
    virtual void setDestination(int destination);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const ProbeMsg& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, ProbeMsg& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>maxmin.msg:33</tt> by opp_msgtool.
 * <pre>
 * message ProbeACK
 * {
 *     long msgId;
 * }
 * </pre>
 */
class ProbeACK : public ::omnetpp::cMessage
{
  protected:
    long msgId = 0;

  private:
    void copy(const ProbeACK& other);

  protected:
    bool operator==(const ProbeACK&) = delete;

  public:
    ProbeACK(const char *name=nullptr, short kind=0);
    ProbeACK(const ProbeACK& other);
    virtual ~ProbeACK();
    ProbeACK& operator=(const ProbeACK& other);
    virtual ProbeACK *dup() const override {return new ProbeACK(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual long getMsgId() const;
    virtual void setMsgId(long msgId);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const ProbeACK& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, ProbeACK& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>maxmin.msg:39</tt> by opp_msgtool.
 * <pre>
 * // only used as self messages
 * message SelfTimer
 * {
 *     float msgTimer;
 * }
 * </pre>
 */
class SelfTimer : public ::omnetpp::cMessage
{
  protected:
    float msgTimer = 0;

  private:
    void copy(const SelfTimer& other);

  protected:
    bool operator==(const SelfTimer&) = delete;

  public:
    SelfTimer(const char *name=nullptr, short kind=0);
    SelfTimer(const SelfTimer& other);
    virtual ~SelfTimer();
    SelfTimer& operator=(const SelfTimer& other);
    virtual SelfTimer *dup() const override {return new SelfTimer(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual float getMsgTimer() const;
    virtual void setMsgTimer(float msgTimer);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const SelfTimer& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, SelfTimer& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>maxmin.msg:44</tt> by opp_msgtool.
 * <pre>
 * message InMsgTimer
 * {
 *     float msgTimer;
 *     int msgId;
 *     // msgType: MaxMinMsg = 0, ProbeMsg = 1
 *     int msgType;
 * }
 * </pre>
 */
class InMsgTimer : public ::omnetpp::cMessage
{
  protected:
    float msgTimer = 0;
    int msgId = 0;
    int msgType = 0;

  private:
    void copy(const InMsgTimer& other);

  protected:
    bool operator==(const InMsgTimer&) = delete;

  public:
    InMsgTimer(const char *name=nullptr, short kind=0);
    InMsgTimer(const InMsgTimer& other);
    virtual ~InMsgTimer();
    InMsgTimer& operator=(const InMsgTimer& other);
    virtual InMsgTimer *dup() const override {return new InMsgTimer(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual float getMsgTimer() const;
    virtual void setMsgTimer(float msgTimer);

    virtual int getMsgId() const;
    virtual void setMsgId(int msgId);

    virtual int getMsgType() const;
    virtual void setMsgType(int msgType);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const InMsgTimer& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, InMsgTimer& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>maxmin.msg:52</tt> by opp_msgtool.
 * <pre>
 * message OutMsgTimer
 * {
 *     float msgTimer;
 *     int msgId;
 *     int destination;
 * }
 * </pre>
 */
class OutMsgTimer : public ::omnetpp::cMessage
{
  protected:
    float msgTimer = 0;
    int msgId = 0;
    int destination = 0;

  private:
    void copy(const OutMsgTimer& other);

  protected:
    bool operator==(const OutMsgTimer&) = delete;

  public:
    OutMsgTimer(const char *name=nullptr, short kind=0);
    OutMsgTimer(const OutMsgTimer& other);
    virtual ~OutMsgTimer();
    OutMsgTimer& operator=(const OutMsgTimer& other);
    virtual OutMsgTimer *dup() const override {return new OutMsgTimer(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual float getMsgTimer() const;
    virtual void setMsgTimer(float msgTimer);

    virtual int getMsgId() const;
    virtual void setMsgId(int msgId);

    virtual int getDestination() const;
    virtual void setDestination(int destination);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const OutMsgTimer& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, OutMsgTimer& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>maxmin.msg:59</tt> by opp_msgtool.
 * <pre>
 * message AckTimeOut
 * {
 *     int msgId;
 * }
 * </pre>
 */
class AckTimeOut : public ::omnetpp::cMessage
{
  protected:
    int msgId = 0;

  private:
    void copy(const AckTimeOut& other);

  protected:
    bool operator==(const AckTimeOut&) = delete;

  public:
    AckTimeOut(const char *name=nullptr, short kind=0);
    AckTimeOut(const AckTimeOut& other);
    virtual ~AckTimeOut();
    AckTimeOut& operator=(const AckTimeOut& other);
    virtual AckTimeOut *dup() const override {return new AckTimeOut(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual int getMsgId() const;
    virtual void setMsgId(int msgId);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const AckTimeOut& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, AckTimeOut& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>maxmin.msg:64</tt> by opp_msgtool.
 * <pre>
 * message ProbeSelfTimer
 * {
 *     float msgTimer;
 *     long msgId;
 * }
 * </pre>
 */
class ProbeSelfTimer : public ::omnetpp::cMessage
{
  protected:
    float msgTimer = 0;
    long msgId = 0;

  private:
    void copy(const ProbeSelfTimer& other);

  protected:
    bool operator==(const ProbeSelfTimer&) = delete;

  public:
    ProbeSelfTimer(const char *name=nullptr, short kind=0);
    ProbeSelfTimer(const ProbeSelfTimer& other);
    virtual ~ProbeSelfTimer();
    ProbeSelfTimer& operator=(const ProbeSelfTimer& other);
    virtual ProbeSelfTimer *dup() const override {return new ProbeSelfTimer(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual float getMsgTimer() const;
    virtual void setMsgTimer(float msgTimer);

    virtual long getMsgId() const;
    virtual void setMsgId(long msgId);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const ProbeSelfTimer& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, ProbeSelfTimer& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>maxmin.msg:70</tt> by opp_msgtool.
 * <pre>
 * message ProbeAckTimeOut
 * {
 *     long msgId;
 * }
 * </pre>
 */
class ProbeAckTimeOut : public ::omnetpp::cMessage
{
  protected:
    long msgId = 0;

  private:
    void copy(const ProbeAckTimeOut& other);

  protected:
    bool operator==(const ProbeAckTimeOut&) = delete;

  public:
    ProbeAckTimeOut(const char *name=nullptr, short kind=0);
    ProbeAckTimeOut(const ProbeAckTimeOut& other);
    virtual ~ProbeAckTimeOut();
    ProbeAckTimeOut& operator=(const ProbeAckTimeOut& other);
    virtual ProbeAckTimeOut *dup() const override {return new ProbeAckTimeOut(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual long getMsgId() const;
    virtual void setMsgId(long msgId);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const ProbeAckTimeOut& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, ProbeAckTimeOut& obj) {obj.parsimUnpack(b);}


namespace omnetpp {

template<> inline MaxMinMsg *fromAnyPtr(any_ptr ptr) { return check_and_cast<MaxMinMsg*>(ptr.get<cObject>()); }
template<> inline MaxMinACK *fromAnyPtr(any_ptr ptr) { return check_and_cast<MaxMinACK*>(ptr.get<cObject>()); }
template<> inline ProbeMsg *fromAnyPtr(any_ptr ptr) { return check_and_cast<ProbeMsg*>(ptr.get<cObject>()); }
template<> inline ProbeACK *fromAnyPtr(any_ptr ptr) { return check_and_cast<ProbeACK*>(ptr.get<cObject>()); }
template<> inline SelfTimer *fromAnyPtr(any_ptr ptr) { return check_and_cast<SelfTimer*>(ptr.get<cObject>()); }
template<> inline InMsgTimer *fromAnyPtr(any_ptr ptr) { return check_and_cast<InMsgTimer*>(ptr.get<cObject>()); }
template<> inline OutMsgTimer *fromAnyPtr(any_ptr ptr) { return check_and_cast<OutMsgTimer*>(ptr.get<cObject>()); }
template<> inline AckTimeOut *fromAnyPtr(any_ptr ptr) { return check_and_cast<AckTimeOut*>(ptr.get<cObject>()); }
template<> inline ProbeSelfTimer *fromAnyPtr(any_ptr ptr) { return check_and_cast<ProbeSelfTimer*>(ptr.get<cObject>()); }
template<> inline ProbeAckTimeOut *fromAnyPtr(any_ptr ptr) { return check_and_cast<ProbeAckTimeOut*>(ptr.get<cObject>()); }

}  // namespace omnetpp

#endif // ifndef __MAXMIN_M_H

